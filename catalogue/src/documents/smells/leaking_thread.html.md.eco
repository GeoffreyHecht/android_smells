---
title: "Leaking Thread"
short: lt
layout: "smell"
affects:
    - Memory Efficiency
context:
    - Implementation
refactorings:
    - introduce_run_check_variable
    - use_fragments_for_configuration_change
tags:
    - view
    - class
    - memory
    - leak
---

## Context

<%= @document.context %>

## Affects

<%= @document.affects %>

## Problem

In  Java threads are GC roots, that is they are kept in the runtime and does not get collected. So if an Activity starts a thread and does not stop it this is considered a bug. As it can leak memory.

In this example the thread will never be stopped.

```
public class MainActivity extends Activity {

  private MyThread mThread;

  @Override
  protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    doIt();
  }

  private void doIt() {
    mThread = new MyThread();
    mThread.start();
  }

  private static class MyThread extends Thread {

    @Override
    public void run() {
      while (true) {
        doReallyHeavyStuff();
      }
    }

  }

}
```

Threads should only be used for short lived computations. The above mentioned behaviour also applies to AsyncTask.

## Refactorings

<% for refactoring in @getRefactorings(): %>
<%- @include(refactoring) %>
<% end %>

