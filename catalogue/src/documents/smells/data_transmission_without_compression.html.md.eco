---
title: "Data Transmission Without Compression"
short: dtwc
layout: "smell"
affects:
    - Energy Efficiency
context:
    - Implementation
    - Network
refactorings:
    - add_Data_Compression_to_Apache_HTTP_Client_based_file_transmission
tags:
    - network
    - energy
necessity: statically structure-based
sufficiency: dynamically, file must be compressed at least 10% of its size (jpeg, e.g., not suitable)
---

## Context

<%= @document.context %>

## Affects

<%= @document.affects %>

## Problem

Höpfner and Bunse discussed in their publication "Towards an energy-consumption based complexity classification for resource substitution strategies"
that transmitting a file over a network infrastructure without compressing it consumes more energy.
More precisely, Energy Efficiency
 is improved in case the data is compressed at least by 10%, transmitted and decompressed at the other network node.

The following example show file transmission implemented with the [Apache HTTP Client Library](http://archive.apache.org/dist/httpcomponents/httpclient/binary/httpcomponents-client-4.2.4-bin.zip) (the example is taken from ClientMultipartFormPost.java).


```
public static void main(String[] args) throws Exception {
    if (args.length != 1)  {
        System.out.println("File path not given");
        System.exit(1);
    }
    HttpClient httpclient = new DefaultHttpClient();
    try {

        HttpPost httppost = new HttpPost("http://some.url:8080/servlets-examples/servlet/RequestInfoExample");
        // the passed File object in this constructor is transmitted without compression
        FileBody bin = new FileBody(new File(args[0]));
        StringBody comment = new StringBody("A binary file of some kind");

        MultipartEntity reqEntity = new MultipartEntity();
        reqEntity.addPart("bin", bin);
        reqEntity.addPart("comment", comment);

        httppost.setEntity(reqEntity);

        System.out.println("executing request " + httppost.getRequestLine());
        HttpResponse response = httpclient.execute(httppost);
        HttpEntity resEntity = response.getEntity();

        System.out.println("----------------------------------------");
        System.out.println(response.getStatusLine());
        if (resEntity != null) {
            System.out.println("Response content length: " + resEntity.getContentLength());
        }
        EntityUtils.consume(resEntity);
    } finally {
        try { httpclient.getConnectionManager().shutdown(); } catch (Exception ignore) {}
    }

}
```

## Refactorings

<% for refactoring in @getRefactorings(): %>
<%- @include(refactoring) %>
<% end %>

## Links

- [Höpfner, Bunse (2010) Towards an energy-consumption based complexity classification for resource substitution strategies](http://ceur-ws.org/Vol-581/gvd2010_7_1.pdf)